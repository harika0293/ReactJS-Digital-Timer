{"version":3,"sources":["components/DigitalTimer/index.js","App.js","index.js"],"names":["DigitalTimer","state","isTimerRunning","timerLimit","currentRunningSeconds","clearTimer","clearInterval","intervalId","onClickResetTimer","notifyTimerReset","setState","message","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","decreaseTimerLimit","prevState","notifyErrorLimit","warn","incrementTimerLimit","startTimerCountDown","notifyTimerCompleted","startStopTimer","setInterval","renderTimerControlOptions","startStopImage","startStopAltText","startStopText","className","type","onClick","src","alt","renderSetTimerControls","isButtonDisabled","disabled","convertTimeToTimerFormat","timeInSeconds","minutes","Math","floor","seconds","minutesInStringFormat","secondsInStringFormat","this","timerStatusText","newestOnTop","rtl","pauseOnFocusLoss","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6df6490.chunk.js","sourcesContent":["// Write your code here\nimport {ToastContainer, toast} from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {Component} from 'react'\nimport './index.css'\n\nclass DigitalTimer extends Component {\n  state = {\n    isTimerRunning: false,\n    timerLimit: 25,\n    currentRunningSeconds: 0,\n  }\n\n  componentWillUnmount() {\n    this.clearTimer()\n  }\n\n  clearTimer = () => {\n    clearInterval(this.intervalId)\n  }\n\n  onClickResetTimer = () => {\n    this.notifyTimerReset('Timer has me reset to default')\n    this.setState({\n      isTimerRunning: false,\n      timerLimit: 25,\n      currentRunningSeconds: 0,\n    })\n    this.clearTimer()\n  }\n\n  notifyTimerReset = message => {\n    toast.info(`ðŸ¦„ ${message}`, {\n      position: 'top-center',\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined,\n    })\n  }\n\n  decreaseTimerLimit = () => {\n    const {timerLimit} = this.state\n    if (timerLimit > 1) {\n      this.setState(prevState => ({timerLimit: prevState.timerLimit - 1}))\n    } else {\n      this.notifyErrorLimit('Timer cant be less than a minute')\n    }\n  }\n\n  notifyErrorLimit = message => {\n    toast.warn(`ðŸ¦„ ${message}`, {\n      position: 'top-center',\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined,\n    })\n  }\n\n  incrementTimerLimit = () => {\n    this.setState(prevState => ({timerLimit: prevState.timerLimit + 1}))\n  }\n\n  startTimerCountDown = () => {\n    const {currentRunningSeconds, timerLimit} = this.state\n    const isTimeCompleted = currentRunningSeconds === timerLimit * 60\n    if (isTimeCompleted) {\n      this.notifyTimerCompleted('Your set time is Completed')\n      this.setState({isTimerRunning: false, currentRunningSeconds: 0})\n      this.clearTimer()\n    } else {\n      this.setState(prevState => ({\n        currentRunningSeconds: prevState.currentRunningSeconds + 1,\n      }))\n    }\n  }\n\n  notifyTimerCompleted = message => {\n    toast(`ðŸ¦„ ${message}`, {\n      position: 'top-center',\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined,\n    })\n  }\n\n  startStopTimer = () => {\n    const {isTimerRunning, currentRunningSeconds, timerLimit} = this.state\n    this.setState(prevState => ({isTimerRunning: !prevState.isTimerRunning}))\n    const isTimeCompleted = currentRunningSeconds === timerLimit * 60\n    if (isTimeCompleted) {\n      this.setState((isTimerRunning: false))\n      this.clearTimer()\n    }\n    if (isTimerRunning) {\n      this.clearTimer()\n      this.setState({isTimerRunning: false})\n    } else {\n      this.intervalId = setInterval(() => {\n        this.startTimerCountDown()\n      }, 1000)\n    }\n  }\n\n  renderTimerControlOptions = () => {\n    const {isTimerRunning} = this.state\n    const playImageUrl =\n      'https://assets.ccbp.in/frontend/react-js/play-icon-img.png'\n    const stopImageUrl =\n      'https://assets.ccbp.in/frontend/react-js/pause-icon-img.png'\n    const resetImageUrl =\n      'https://assets.ccbp.in/frontend/react-js/reset-icon-img.png'\n    const startStopImage = isTimerRunning ? stopImageUrl : playImageUrl\n    const startStopAltText = isTimerRunning ? 'pause icon' : 'play icon'\n    const startStopText = isTimerRunning ? 'Pause' : 'Start'\n    return (\n      <div className=\"control-options-container\">\n        <button\n          className=\"start-stop-button\"\n          type=\"button\"\n          onClick={this.startStopTimer}\n        >\n          <div className=\"start-stop-container\">\n            <img\n              src={startStopImage}\n              className=\"start-stop-img\"\n              alt={startStopAltText}\n            />\n            <h1 className=\"start-stop-text\">{startStopText}</h1>\n          </div>\n        </button>\n\n        <button\n          className=\"start-stop-button\"\n          type=\"button\"\n          onClick={this.onClickResetTimer}\n        >\n          <div className=\"start-stop-container\">\n            <img src={resetImageUrl} className=\"reset-img\" alt=\"reset icon\" />\n            <h1 className=\"start-stop-text\">Reset</h1>\n          </div>\n        </button>\n      </div>\n    )\n  }\n\n  renderSetTimerControls = () => {\n    const {timerLimit, currentRunningSeconds} = this.state\n    const isButtonDisabled = currentRunningSeconds > 0\n    return (\n      <div className=\"set-timer-controls\">\n        <div className=\"set-limit-heading-container\">\n          <p className=\"set-timer-heading\">Set Timer Limit</p>\n        </div>\n        <div className=\"inc-dec-time-container\">\n          <button\n            className=\"inc-sec-button\"\n            type=\"button\"\n            onClick={this.decreaseTimerLimit}\n            disabled={isButtonDisabled}\n          >\n            <h1 className=\"inc-dec-icon\">-</h1>\n          </button>\n          <div className=\"time-limit-text-container\">\n            <p className=\"time-limit-text\">{timerLimit}</p>\n          </div>\n          <button\n            className=\"inc-sec-button\"\n            type=\"button\"\n            onClick={this.incrementTimerLimit}\n            disabled={isButtonDisabled}\n          >\n            <h1 className=\"inc-dec-icon\">+</h1>\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  convertTimeToTimerFormat = () => {\n    const {timerLimit, currentRunningSeconds} = this.state\n    const timeInSeconds = timerLimit * 60 - currentRunningSeconds\n    const minutes = Math.floor(timeInSeconds / 60)\n    const seconds = Math.floor(timeInSeconds % 60)\n    const minutesInStringFormat = minutes > 9 ? minutes : `0${minutes}`\n    const secondsInStringFormat = seconds > 9 ? seconds : `0${seconds}`\n    return `${minutesInStringFormat}:${secondsInStringFormat}`\n  }\n\n  render() {\n    const {isTimerRunning} = this.state\n    const timerStatusText = isTimerRunning ? 'Running' : 'Paused'\n    return (\n      <div className=\"app-container\">\n        <div className=\"header-container\">\n          <h1 className=\"timer-heading\">Digital Timer</h1>\n        </div>\n        <div className=\"display-timer-container\">\n          <div className=\"show-time-container\">\n            <div className=\"timer-block\">\n              <h1 className=\"time-text\">{this.convertTimeToTimerFormat()}</h1>\n              <p className=\"time-status\">{timerStatusText}</p>\n            </div>\n          </div>\n          <div className=\"timer-control-container\">\n            {this.renderTimerControlOptions()}\n            {this.renderSetTimerControls()}\n          </div>\n        </div>\n        <ToastContainer\n          position=\"top-center\"\n          autoClose={2000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover={false}\n        />\n      </div>\n    )\n  }\n}\n\nexport default DigitalTimer\n","import DigitalTimer from './components/DigitalTimer'\n\nimport './App.css'\n\nconst App = () => <DigitalTimer />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}